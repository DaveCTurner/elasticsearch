[role="xpack"]
[[repo-speed-test-api]]
=== Repository speed test API
++++
<titleabbrev>Repository speed test</titleabbrev>
++++

Measures the performance characteristics of a snapshot repository.

////
[source,console]
----
PUT /_snapshot/my_repository
{
  "type": "fs",
  "settings": {
    "location": "my_backup_location"
  }
}
----
// TESTSETUP
////

[source,console]
----
POST /_snapshot/my_repository/_speed_test?blob_count=10&concurrency=4&max_blob_size=1mb&timeout=120s
----

[[repo-speed-test-api-request]]
==== {api-request-title}

`POST /_snapshot/<repository>/_speed_test`

[[repo-speed-test-api-desc]]
==== {api-description-title}

There are a large number of third-party storage systems available, not all of
which are suitable for use as a snapshot repository by {es}. Some storage
systems perform poorly, or behave incorrectly, especially when accessed
concurrently by multiple clients as the nodes of an {es} cluster do.

The Repository speed test API performs a collection of read and write
operations on your repository which are specially designed to detect incorrect
behaviour and to measure the performance characteristics of your storage
system.

Each speed test runs a wide variety of operations generated by a pseudo-random
process. You can seed this process using the optional `seed` parameter in order
to repeat the same set of operations in multiple experiments. Note that the
operations are performed concurrently so may not always happen in the same
order on each run.

The default values for the parameters to this API are deliberately low to
reduce the impact of running this API accidentally. A realistic experiment
should set `blob_count` to at least `2000` and `max_blob_size` to at least
`2gb`, and will almost certainly need to increase the `timeout` to allow time
for the process to complete successfully.

If the speed test is successful this API returns details of the testing
process, including how long each operation took. You can use this information
to analyse the performance of your storage system. If any operation fails or
returns an incorrect result, this API returns an error. If the API returns an
error then it may not have removed all the data it wrote to the repository. The
error will indicate the location of any leftover data, and this path is also
recorded in the {es} logs. You should verify yourself that this location has
been cleaned up correctly. If there is still leftover data at the specified
location then you should manually remove it.

If the connection from your client to {es} is closed while the client is
waiting for the result of the speed test then the test is cancelled.  Since a
speed test takes a long time to complete, you may need to configure your client
to wait for longer than usual for a response. On cancellation the speed test
attempts to clean up the data it was writing, but it may not be able to remove
it all. The path to the leftover data is recorded in the {es} logs. You should
verify yourself that this location has been cleaned up correctly. If there is
still leftover data at the specified location then you should manually remove
it.

NOTE: A speed test writes a substantial amount of data to your repository and
then reads it back again. This consumes bandwidth on the network between the
cluster and the repository, and storage space and IO bandwidth on the
repository itself. You must ensure this load does not affect other users of
these systems. Speed tests respect the repository settings
`max_snapshot_bytes_per_sec` and `max_restore_bytes_per_sec` if available, and
the cluster setting `indices.recovery.max_bytes_per_sec` which you can use to
limit the bandwidth they consume.

[[repo-speed-test-api-path-params]]
==== {api-path-parms-title}

`<repository>`::
(Required, string)
Name of the snapshot repository to test.

[[repo-speed-test-api-query-params]]
==== {api-query-parms-title}

`blob_count`::
(Optional, integer) The total number of blobs to write to the repository during
the test. Defaults to `100`. For realistic experiments you should set this to
at least `2000`.

`concurrency`::
(Optional, integer) The number of write operations to perform concurrently.
Defaults to `10`.

`seed`::
(Optional, integer) The seed for the pseudo-random number generator used to
generate the list of operations performed during the test. To repeat the same
set of operations in multiple experiments, use the same seed in each
experiment.

`max_blob_size`::
(Optional, <<size-units, size units>>) The maximum size of a blob to be written
during the test. Defaults to `10mb`. For realistic experiments you should set
this to at least `2gb`.

`master_timeout`::
(Optional, <<time-units, time units>>) Specifies the period of time to wait for
a connection to the master node. If no response is received before the timeout
expires, the request fails and returns an error. Defaults to `30s`.

`timeout`::
(Optional, <<time-units, time units>>) Specifies the period of time to wait for
the test to complete. If no response is received before the timeout expires,
the test is cancelled and returns an error. Defaults to `30s`.

[role="child_attributes"]
[[repo-speed-test-api-response-body]]
==== {api-response-body-title}

nocommit todo
