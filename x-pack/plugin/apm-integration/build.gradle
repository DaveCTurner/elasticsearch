/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.internal-es-plugin'
apply plugin: 'elasticsearch.internal-test-artifact'

esplugin {
  name 'apm-integration'
  description 'Provides APM integration for Elasticsearch'
  classname 'org.elasticsearch.xpack.apm.APM'
  extendedPlugins = ['x-pack-core']
}

dependencies {

  implementation('io.opentelemetry:opentelemetry-api:1.9.0')
  implementation('io.opentelemetry:opentelemetry-context:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-jaeger:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-jaeger-proto:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-jaeger-thrift:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-logging:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-logging-otlp:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp-common:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp-http-trace:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp-trace:1.9.0')
  implementation('io.opentelemetry:opentelemetry-exporter-zipkin:1.9.0')
  implementation('io.opentelemetry:opentelemetry-extension-annotations:1.9.0')
  implementation('io.opentelemetry:opentelemetry-extension-aws:1.9.0')
  implementation('io.opentelemetry:opentelemetry-extension-kotlin:1.9.0')
  implementation('io.opentelemetry:opentelemetry-extension-trace-propagators:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk-common:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-autoconfigure-spi:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-aws:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-jaeger-remote-sampler:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-resources:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk-testing:1.9.0')
  implementation('io.opentelemetry:opentelemetry-sdk-trace:1.9.0')

  implementation('io.opentelemetry:opentelemetry-api-metrics:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp-http-logs:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp-http-metrics:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp-logs:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-exporter-otlp-metrics:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-exporter-prometheus:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-extension-incubator:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-extension-noop-api:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-opencensus-shim:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-opentracing-shim:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-autoconfigure:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-jfr-events:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-tracing-incubator:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-sdk-extension-zpages:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-sdk-metrics:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-sdk-metrics-testing:1.9.0-alpha')
  implementation('io.opentelemetry:opentelemetry-semconv:1.9.0-alpha')

  implementation "io.opentelemetry:opentelemetry-api:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-api-metrics:${versions.opentelemetry}-alpha"
  implementation "io.opentelemetry:opentelemetry-context:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk-trace:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk-common:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk-metrics:${versions.opentelemetry}-alpha"
  implementation "io.opentelemetry:opentelemetry-semconv:${versions.opentelemetry}-alpha"
  implementation "io.opentelemetry:opentelemetry-exporter-logging:${versions.opentelemetry}"

  implementation("com.squareup.okio:okio:3.0.0")
  implementation("com.squareup.okhttp3:okhttp:4.9.0")
  implementation("org.jetbrains.kotlin:kotlin-stdlib:1.5.31")

  compileOnly project(path: xpackModule('core'))
  internalClusterTestImplementation(testArtifact(project(xpackModule('core'))))
}

// no unit-test for now
tasks.named("test").configure { enabled = false }

tasks.named("thirdPartyAudit").configure {
  ignoreViolations(
    'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueConsumerIndexField',
    'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueProducerIndexField',
    'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueProducerLimitField',
    'io.opentelemetry.internal.shaded.jctools.util.UnsafeAccess',
    'io.opentelemetry.internal.shaded.jctools.util.UnsafeRefArrayAccess'
  )
  ignoreMissingClasses(
    'io.opentelemetry.sdk.logs.data.Body',
    'io.opentelemetry.sdk.logs.data.LogData',
    'io.opentelemetry.sdk.logs.export.LogExporter'
  )
}
