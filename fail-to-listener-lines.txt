distribution/archives/integ-test-zip/src/javaRestTest/java/org/elasticsearch/test/rest/WaitForRefreshAndCloseIT.java: } catch (IOException e) {	 future.onFailure(e);	 }
modules/ingest-common/src/main/java/org/elasticsearch/ingest/common/GrokProcessorGetAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java: } catch (Exception t) {	 l.onFailure(t);	 }
modules/lang-mustache/src/main/java/org/elasticsearch/script/mustache/TransportSearchTemplateAction.java: } catch (IOException e) {	 listener.onFailure(e);	 }
modules/reindex/src/main/java/org/elasticsearch/reindex/remote/RemoteScrollableHitSource.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/internalClusterTest/java/org/elasticsearch/action/admin/cluster/node/tasks/CancellableTasksIT.java: } catch (TaskCancelledException e) {	 latchedListener.onFailure(new SendRequestTransportException(subRequest.node, ACTION.name(), e));	 }
server/src/internalClusterTest/java/org/elasticsearch/action/admin/cluster/node/tasks/TasksIT.java: } catch (InterruptedException | BrokenBarrierException e) {	 onFailure(e);	 }
server/src/internalClusterTest/java/org/elasticsearch/indices/flush/FlushIT.java: } catch (Exception ex) {	 onFailure(ex);	 }
server/src/internalClusterTest/java/org/elasticsearch/indices/stats/IndexStatsIT.java: } catch (final BrokenBarrierException | InterruptedException e) {	 failed.set(true);	 executionFailures.get().add(e);
server/src/internalClusterTest/java/org/elasticsearch/indices/stats/IndexStatsIT.java: } catch (final BrokenBarrierException | InterruptedException e) {	 failed.set(true);	 executionFailures.get().add(e);
server/src/internalClusterTest/java/org/elasticsearch/indices/stats/IndexStatsIT.java: } catch (final ExecutionException | InterruptedException e) {	 failed.set(true);	 executionFailures.get().add(e);
server/src/main/java/org/elasticsearch/action/ActionListener.java: } catch (Exception e) {	 onFailure(e);	 return;
server/src/main/java/org/elasticsearch/action/ActionListener.java: } catch (Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/ActionListener.java: } catch (Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/ActionListener.java: } catch (Exception ex) {	 try {	 listener.onFailure(ex);
server/src/main/java/org/elasticsearch/action/ActionListener.java: } catch (Exception ex) {	 super.onFailure(ex);	 return;
server/src/main/java/org/elasticsearch/action/ActionListener.java: } catch (Exception e) {	 try {	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/action/ActionListener.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/SingleResultDeduplicator.java: } catch (Exception e) {	 wrappedListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/cluster/desirednodes/TransportUpdateDesiredNodesAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/cluster/desirednodes/TransportUpdateDesiredNodesAction.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/cluster/desirednodes/TransportUpdateDesiredNodesAction.java: } catch (Exception e) {	 taskContext.onFailure(e);	 continue;
server/src/main/java/org/elasticsearch/action/admin/cluster/node/shutdown/TransportPrevalidateNodeRemovalAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/cluster/node/tasks/list/TransportListTasksAction.java: } catch (Exception e) {	 allMatchedTasksRemovedListener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/get/TransportGetSnapshotsAction.java: } catch (RepositoryMissingException e) {	 listener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/action/admin/cluster/snapshots/status/TransportSnapshotsStatusAction.java: } catch (Exception e) {	 // stops all further fetches of snapshotInfo since context is fail-fast	 context.onFailure(e);
server/src/main/java/org/elasticsearch/action/admin/cluster/state/TransportClusterStateAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/indices/create/AutoCreateAction.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/indices/mapping/put/TransportPutMappingAction.java: } catch (IOException e) {	 wrappedListener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/action/admin/indices/refresh/TransportUnpromotableShardRefreshAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/indices/rollover/TransportRolloverAction.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/admin/indices/shrink/TransportResizeAction.java: } catch (Exception e) {	 delegatedListener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/action/bulk/TransportBulkAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/explain/TransportExplainAction.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
server/src/main/java/org/elasticsearch/action/get/TransportGetAction.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
server/src/main/java/org/elasticsearch/action/get/TransportShardMultiGetAction.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
server/src/main/java/org/elasticsearch/action/ingest/SimulatePipelineTransportAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/search/SearchScrollAsyncAction.java: } catch (Exception e) {	 // we need to fail the entire request here - the entire phase just blew up	 // don't call onShardFailure or onFailure here since otherwise we'd countDown the counter
server/src/main/java/org/elasticsearch/action/search/SearchScrollAsyncAction.java: } catch (Exception e) {	 listener.onFailure(new ReduceSearchPhaseException("fetch", "inner finish failed", e, buildShardFailures()));	 }
server/src/main/java/org/elasticsearch/action/search/SearchScrollAsyncAction.java: } catch (Exception e) {	 e.addSuppressed(failure);	 listener.onFailure(
server/src/main/java/org/elasticsearch/action/search/TransportSearchAction.java: } catch (Exception e) {	 originalListener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/action/search/TransportSearchScrollAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/ChannelActionListener.java: } catch (Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/ListenableActionFuture.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/ThreadedActionListener.java: } catch (Exception e3) {	 e.addSuppressed(e3);	 onFailure(e);
server/src/main/java/org/elasticsearch/action/support/TransportAction.java: } catch (Exception e) {	 logger.trace("Error during transport action execution.", e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/action/support/TransportAction.java: } catch (Exception e) {	 delegate.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/TransportAction.java: } catch (Exception inner) {	 inner.addSuppressed(e);	 delegate.onFailure(inner);
server/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/broadcast/TransportBroadcastAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java: } catch (Exception e) {	 logger.debug("failed to combine responses from nodes", e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/action/support/broadcast/node/TransportBroadcastByNodeAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java: } catch (Exception e) {	 // accept state as block will be rechecked by doStart() and listener.onFailure() then called	 logger.debug("exception occurred during cluster block checking, accepting state", e);
server/src/main/java/org/elasticsearch/action/support/master/TransportMasterNodeAction.java: } catch (Exception e) {	 logger.trace("top-level failure", e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java: } catch (RuntimeException e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java: } catch (RuntimeException e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java: } catch (RuntimeException e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/replication/TransportReplicationAction.java: } catch (Exception e) {	 Releasables.closeWhileHandlingException(releasable); // release shard operation lock before responding to caller	 AsyncReplicaAction.this.onFailure(e);
server/src/main/java/org/elasticsearch/action/support/single/instance/TransportInstanceSingleOperationAction.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java: } catch (Exception e) {	 taskListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java: } catch (Exception e) {	 logger.debug("failed to generate empty response", e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java: } catch (Exception e) {	 onFailure(idx, nodeId, e);	 }
server/src/main/java/org/elasticsearch/action/support/tasks/TransportTasksAction.java: } catch (Exception e) {	 logger.debug("failed to combine responses from nodes", e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/action/termvectors/TransportTermVectorsAction.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
server/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java: } catch (Exception inner) {	 inner.addSuppressed(e);	 listener.onFailure(inner);
server/src/main/java/org/elasticsearch/action/update/TransportUpdateAction.java: } catch (IOException e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/client/internal/support/AbstractClient.java: } catch (Exception e) {	 assert false : new AssertionError(e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/cluster/SimpleBatchedAckListenerTaskExecutor.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/cluster/SimpleBatchedExecutor.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/cluster/action/index/MappingUpdatedAction.java: } catch (InterruptedException e) {	 Thread.currentThread().interrupt();	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java: } catch (Exception e) {	 joinListener.onFailure(e);	 } finally {
server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java: } catch (Exception e) {	 joinListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/cluster/coordination/Coordinator.java: } catch (Exception e) {	 logger.debug(() -> "[" + clusterStatePublicationEvent.getSummary() + "] publishing failed", e);	 publishListener.onFailure(new FailedToCommitClusterStateException("publishing failed", e));
server/src/main/java/org/elasticsearch/cluster/coordination/NodeJoinExecutor.java: } catch (IllegalArgumentException | IllegalStateException e) {	 onTaskSuccess.add(() -> nodeJoinTask.listener().onFailure(e));	 continue;
server/src/main/java/org/elasticsearch/cluster/coordination/PublicationTransportHandler.java: } catch (Exception e) {	 logger.warn(() -> format("failed to serialize cluster state before publishing it to node %s", destination), e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexStateService.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexStateService.java: } catch (Exception e) {	 for (final var taskContext : batchExecutionContext.taskContexts()) {	 taskContext.onFailure(e);
server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java: } catch (Exception e) {	 if (validationFailure == null) {	 validationFailure = new IllegalArgumentException(
server/src/main/java/org/elasticsearch/cluster/metadata/MetadataIndexTemplateService.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/cluster/metadata/MetadataMappingService.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/cluster/metadata/MetadataUpdateSettingsService.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/common/util/CancellableSingleObjectCache.java: } catch (Exception e) {	 // either the refresh completed exceptionally or the listener threw an exception; call onFailure() either way	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/common/util/CancellableSingleObjectCache.java: } catch (Exception e) {	 future.onFailure(e);	 }
server/src/main/java/org/elasticsearch/common/util/concurrent/AbstractRunnable.java: } catch (Exception t) {	 onFailure(t);	 } finally {
server/src/main/java/org/elasticsearch/common/util/concurrent/ListenableFuture.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/common/util/concurrent/ListenableFuture.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/discovery/HandshakingTransportAddressConnector.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/discovery/HandshakingTransportAddressConnector.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/health/node/action/TransportHealthNodeAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/health/node/action/TransportHealthNodeAction.java: } catch (Exception e) {	 logger.trace(() -> format("Failed to route/execute health node action %s", actionName), e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/index/CompositeIndexEventListener.java: } catch (Exception e) {	 outerListener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java: } catch (IOException | TranslogCorruptedException e) {	 throw new EngineCreationFailureException(shardId, "failed to create engine", e);	
server/src/main/java/org/elasticsearch/index/engine/InternalEngine.java: } catch (IOException e) {	 throw new EngineCreationFailureException(	 config().getShardId(),
server/src/main/java/org/elasticsearch/index/query/AbstractGeometryQueryBuilder.java: } catch (Exception e) {	 l.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/query/Rewriteable.java: } catch (IOException | IllegalArgumentException | ParsingException ex) {	 rewriteResponse.onFailure(ex);	 }
server/src/main/java/org/elasticsearch/index/reindex/RejectAwareActionListener.java: } catch (Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/seqno/ReplicationTracker.java: } catch (Exception e) {	 groupedActionListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/IndexShard.java: } catch (Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/IndexShard.java: } catch (final Exception e) {	 wrappedListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/IndexShard.java: } catch (Exception e) {	 listener.onFailure(e);	 } finally {
server/src/main/java/org/elasticsearch/index/shard/IndexShard.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/IndexShard.java: } catch (Exception e) {	 releasable.close();	 delegatedListener.onFailure(e);
server/src/main/java/org/elasticsearch/index/shard/IndexShardOperationPermits.java: } catch (final InterruptedException e) {	 onAcquired.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java: } catch (final Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/PrimaryReplicaSyncer.java: } catch (Exception e) {	 wrappedListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java: } catch (Exception e) {	 recoveryListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java: } catch (IOException e) {	 recoveryListener.onFailure(new IndexShardRecoveryException(indexShard.shardId(), "failed to recover from local shards", e));	
server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java: } catch (Exception e) {	 recoveryListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/index/shard/StoreRecovery.java: } catch (Exception e) {	 restoreListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/indices/recovery/MultiChunkTransfer.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java: } catch (Exception e) {	 failureHandler.onFailure(e);	 }
server/src/main/java/org/elasticsearch/indices/recovery/PeerRecoveryTargetService.java: } catch (Exception e) {	 toSendListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/indices/recovery/RecoverySourceHandler.java: } catch (Exception e) {	 IOUtils.closeWhileHandlingException(releaseResources, () -> future.onFailure(e));	 }
server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/indices/recovery/RecoveryTarget.java: } catch (Exception e) {	 logger.debug(() -> format("Unable to recover snapshot file %s from repository %s", fileInfo, repository), e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/ingest/IngestService.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
server/src/main/java/org/elasticsearch/persistent/PersistentTasksService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/persistent/PersistentTasksService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/repositories/GetSnapshotInfoContext.java: } catch (Exception e) {	 assert false : e;	 onFailure(e);
server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java: } catch (Exception e) {	 logger.warn(() -> "[" + repositoryName + "] failed to finish repository verification", e);	 delegatedListener.onFailure(e);
server/src/main/java/org/elasticsearch/repositories/RepositoriesService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/repositories/VerifyNodeRepositoryAction.java: } catch (Exception e) {	 logger.warn(() -> "[" + repository + "] failed to verify repository", e);	 errors.add(new VerificationFailure(node.getId(), e));
server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java: } catch (Exception e) {	 listener.onFailure(	 new RepositoryException(metadata.name(), "Could not determine repository generation from root blobs", e)
server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java: } catch (Exception e) {	 listener.onFailure(new RepositoryException(metadata.name(), "Unexpected exception when loading repository data", e));	 return;
server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java: } catch (Exception e) {	 context.onFailure(e);	 }
server/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreRepository.java: } catch (Exception e) {	 allFilesListener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/repositories/blobstore/FileRestoreContext.java: } catch (Exception e) {	 listener.onFailure(e);	 } finally {
server/src/main/java/org/elasticsearch/reservedstate/service/FileSettingsService.java: } catch (Exception e) {	 completion.onFailure(e);	 }
server/src/main/java/org/elasticsearch/rest/action/RestActionListener.java: } catch (Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/rest/action/cat/RestIndicesAction.java: } catch (Exception e) {	 onFailure(e);	 }
server/src/main/java/org/elasticsearch/search/SearchService.java: } catch (Exception exc) {	 l.onFailure(exc);	 return;
server/src/main/java/org/elasticsearch/search/SearchService.java: } catch (Exception exc) {	 Releasables.closeWhileHandlingException(searcherSupplier, readerContext);	 listener.onFailure(exc);
server/src/main/java/org/elasticsearch/search/SearchService.java: } catch (IOException e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/snapshots/RestoreService.java: } catch (Exception e) {	 logger.warn(() -> "[" + request.repository() + ":" + request.snapshot() + "] failed to restore snapshot", e);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/snapshots/SnapshotShardsService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/main/java/org/elasticsearch/snapshots/SnapshotsService.java: } catch (Exception e) {	 assert false : new AssertionError(e);	 handleFinalizationFailure(e, snapshot, repositoryData);
server/src/main/java/org/elasticsearch/tasks/TaskManager.java: } catch (IOException ex) {	 logger.warn(() -> format("couldn't store error %s", ExceptionsHelper.stackTrace(error)), ex);	 listener.onFailure(ex);
server/src/main/java/org/elasticsearch/tasks/TaskManager.java: } catch (IOException ex) {	 logger.warn(() -> format("couldn't store response %s", response), ex);	 listener.onFailure(ex);
server/src/main/java/org/elasticsearch/transport/OutboundHandler.java: } catch (RuntimeException ex) {	 Releasables.closeExpectNoException(() -> listener.onFailure(ex), () -> CloseableChannel.closeChannel(channel));	 throw ex;
server/src/main/java/org/elasticsearch/transport/RemoteClusterConnection.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
server/src/main/java/org/elasticsearch/transport/RemoteClusterService.java: } catch (NoSuchRemoteClusterException e) {	 listener.onFailure(e);	 return;
server/src/main/java/org/elasticsearch/transport/SniffConnectionStrategy.java: } catch (Exception e) {	 onFailure.accept(e);	 }
server/src/main/java/org/elasticsearch/transport/TcpTransport.java: } catch (ConnectTransportException e) {	 CloseableChannel.closeChannels(channels, false);	 listener.onFailure(e);
server/src/main/java/org/elasticsearch/transport/TcpTransport.java: } catch (Exception e) {	 CloseableChannel.closeChannels(channels, false);	 listener.onFailure(new ConnectTransportException(node, "general node connection failure", e));
server/src/test/java/org/elasticsearch/action/admin/cluster/node/tasks/TransportTasksActionTests.java: } catch (Exception e) {	 listener.onFailure(e);	 fail(e.getMessage());
server/src/test/java/org/elasticsearch/action/bulk/TransportBulkActionIndicesThatCannotBeCreatedTests.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/test/java/org/elasticsearch/action/support/replication/TransportReplicationAllPermitsAcquisitionTests.java: } catch (InterruptedException | BrokenBarrierException e) {	 onFailure(e);	 }
server/src/test/java/org/elasticsearch/cluster/coordination/JoinValidationServiceTests.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/test/java/org/elasticsearch/cluster/coordination/NodeJoinTests.java: } catch (Exception e) {	 logger.error(() -> format("unexpected error for %s", future), e);	 future.onFailure(e);
server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java: } catch (EngineCreationFailureException | IOException ex) {	 assertEquals(store.refCount(), refCount);	 continue;
server/src/test/java/org/elasticsearch/index/engine/InternalEngineTests.java: } catch (EngineCreationFailureException ex) {	 // all is fine	 assertEquals(store.refCount(), refCount);
server/src/test/java/org/elasticsearch/index/seqno/RetentionLeaseActionsTests.java: } catch (final InterruptedException e) {	 onFailure(e);	 }
server/src/test/java/org/elasticsearch/index/shard/IndexShardOperationPermitsTests.java: } catch (final Exception e) {	 onFailure(e);	 }
server/src/test/java/org/elasticsearch/index/shard/IndexShardTests.java: } catch (Exception e) {	 listener.onFailure(e);	 }
server/src/test/java/org/elasticsearch/transport/OutboundHandlerTests.java: } catch (InterruptedException e) {	 listener.onFailure(e);	 }
server/src/test/java/org/elasticsearch/transport/RemoteClusterServiceTests.java: } catch (Exception e) {	 clusterAdded.onFailure(e);	 }
test/framework/src/main/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java: } catch (Exception e) {	 listener.onFailure(e);	 }
test/framework/src/main/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java: } catch (final Exception e) {	 Releasables.closeWhileHandlingException(releasable);	 delegatedListener.onFailure(e);
test/framework/src/main/java/org/elasticsearch/index/replication/ESIndexLevelReplicationTestCase.java: } catch (Exception e) {	 listener.onFailure(e);	 }
test/framework/src/main/java/org/elasticsearch/repositories/blobstore/BlobStoreTestUtil.java: } catch (Exception e) {	 onFailure(e);	 return;
test/framework/src/main/java/org/elasticsearch/test/transport/MockTransportService.java: } catch (InterruptedException e) {	 listener.onFailure(new ConnectTransportException(discoveryNode, "UNRESPONSIVE: simulated"));	 }
x-pack/plugin/async-search/src/main/java/org/elasticsearch/xpack/search/AsyncSearchTask.java: } catch (Exception exc) {	 listener.onFailure(exc);	 return;
x-pack/plugin/blob-cache/src/main/java/org/elasticsearch/blobcache/common/ProgressListenableActionFuture.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java: } catch (final IOException caught) {	 listener.onFailure(caught);	 }
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/ShardChangesAction.java: } catch (final Exception caught) {	 caught.addSuppressed(e);	 listener.onFailure(caught);
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportForgetFollowerAction.java: } catch (Exception e) {	 releasable.close();	 onFailure(e);
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/TransportResumeFollowAction.java: } catch (final IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/bulk/TransportBulkShardOperationsAction.java: } catch (Exception e) {	 releasingListener.onFailure(e);	 }
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/action/repositories/GetCcrRestoreFileChunkAction.java: } catch (IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java: } catch (Exception e) {	 assert false : e;	 context.onFailure(e);
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java: } catch (Exception e) {	 assert false;	 listener.onFailure(e);
x-pack/plugin/ccr/src/main/java/org/elasticsearch/xpack/ccr/repository/CcrRepository.java: } catch (Exception e) {	 restoreListener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/license/LicenseService.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/core/src/main/java/org/elasticsearch/license/RemoteClusterLicenseChecker.java: } catch (final Exception e) {	 contextPreservingActionListener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/action/AbstractTransportGetResourcesAction.java: } catch (IOException e) {	 l.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncResultsService.java: } catch (Exception exc) {	 listener.onFailure(exc);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncResultsService.java: } catch (Exception exc) {	 listener.onFailure(exc);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/AsyncTaskIndexService.java: } catch (Exception exc) {	 outerListener.onFailure(exc);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/async/DeleteAsyncResultsService.java: } catch (Exception exc) {	 listener.onFailure(new ResourceNotFoundException(request.getId()));	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/IteratingActionListener.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/common/IteratingActionListener.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ilm/AsyncRetryDuringSnapshotActionStep.java: } catch (Exception e) {	 originalListener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/security/ScrollHelper.java: } catch (Exception e) {	 onFailure(e); // lets clean up things	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/ssl/action/TransportGetCertificateInfoAction.java: } catch (GeneralSecurityException | IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/termsenum/action/TransportTermsEnumAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/core/src/main/java/org/elasticsearch/xpack/core/termsenum/action/TransportTermsEnumAction.java: } catch (Exception e) {	 listener.onFailure(e);	 } finally {
x-pack/plugin/core/src/test/java/org/elasticsearch/snapshots/sourceonly/SourceOnlySnapshotShardTests.java: } catch (Exception e) {	 future.onFailure(e);	 }
x-pack/plugin/core/src/test/java/org/elasticsearch/xpack/core/common/notifications/AbstractAuditorTests.java: } catch (InterruptedException e) {	 Thread.currentThread().interrupt();	 listener.onFailure(e);
x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/EnrichPolicyRunner.java: } catch (Exception e) {	 l.onFailure(e);	 }
x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/EnrichPolicyRunner.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/TransportDeleteEnrichPolicyAction.java: } catch (Exception e) {	 policyLock.close();	 listener.onFailure(e);
x-pack/plugin/enrich/src/main/java/org/elasticsearch/xpack/enrich/action/TransportDeleteEnrichPolicyAction.java: } catch (Exception e) {	 policyLock.close();	 listener.onFailure(e);
x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/plugin/RestEqlSearchAction.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/eql/src/main/java/org/elasticsearch/xpack/eql/session/EqlSession.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
x-pack/plugin/fleet/src/main/java/org/elasticsearch/xpack/fleet/action/GetGlobalCheckpointsAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/fleet/src/main/java/org/elasticsearch/xpack/fleet/action/GetGlobalCheckpointsAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/fleet/src/main/java/org/elasticsearch/xpack/fleet/action/GetGlobalCheckpointsShardAction.java: } catch (final IOException caught) {	 listener.onFailure(caught);	 }
x-pack/plugin/fleet/src/main/java/org/elasticsearch/xpack/fleet/action/GetGlobalCheckpointsShardAction.java: } catch (RuntimeException e2) {	 listener.onFailure(e2);	 }
x-pack/plugin/graph/src/main/java/org/elasticsearch/xpack/graph/action/TransportGraphExploreAction.java: } catch (Exception e) {	 logger.error("unable to execute the graph query", e);	 listener.onFailure(e);
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlInitiateSingleSignOnAction.java: } catch (ElasticsearchException e) {	 listener.onFailure(e);	 }
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/action/TransportSamlValidateAuthnRequestAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java: } catch (ElasticsearchSecurityException e) {	 logger.debug("Failed to parse query string for SAML AuthnRequest", e);	 listener.onFailure(e);
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java: } catch (ElasticsearchSecurityException e) {	 logger.debug("Could not validate AuthnRequest", e);	 listener.onFailure(e);
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/authn/SamlAuthnRequestValidator.java: } catch (ElasticsearchSecurityException e) {	 logger.debug("Could not process AuthnRequest", e);	 listener.onFailure(e);
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlIdentityProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/idp/SamlMetadataGenerator.java: } catch (Exception e) {	 logger.debug("Error generating IDP metadata to share with [" + spEntityId + "]", e);	 listener.onFailure(e);
x-pack/plugin/identity-provider/src/main/java/org/elasticsearch/xpack/idp/saml/sp/SamlServiceProviderIndex.java: } catch (IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/IndexLifecycleRunner.java: } catch (Exception e) {	 taskContext.onFailure(e);	 }
x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/ilm/action/TransportExplainLifecycleAction.java: } catch (IOException e) {	 listener.onFailure(new ElasticsearchParseException("failed to parse phase definition for index [" + index + "]", e));	 return;
x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/SnapshotRetentionTask.java: } catch (Exception e) {	 listener.onFailure(e);	 } finally {
x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/action/TransportExecuteSnapshotLifecycleAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ilm/src/main/java/org/elasticsearch/xpack/slm/action/TransportExecuteSnapshotRetentionAction.java: } catch (Exception e) {	 listener.onFailure(new ElasticsearchException("failed to execute snapshot lifecycle retention", e));	 }
x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/ilm/history/ILMHistoryStoreTests.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ilm/src/test/java/org/elasticsearch/xpack/slm/history/SnapshotLifecycleTemplateRegistryTests.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportDeleteForecastAction.java: } catch (ElasticsearchException ex) {	 listener.onFailure(ex);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportGetOverallBucketsAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportKillProcessAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportPostDataAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportPreviewDatafeedAction.java: } catch (Exception e) {	 listener.onFailure(e);	 } finally {
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportPutTrainedModelAction.java: } catch (IOException ex) {	 listener.onFailure(ExceptionsHelper.badRequestException("Failed to parse definition for [{}]", ex, config.getModelId()));	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportPutTrainedModelAction.java: } catch (ElasticsearchException ex) {	 listener.onFailure(	 ExceptionsHelper.badRequestException("Definition for [{}] has validation failures.", ex, config.getModelId())
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportSetUpgradeModeAction.java: } catch (ElasticsearchException ex) {	 logger.info("Caught node failures waiting for tasks to be unassigned", ex);	 wrappedListener.onFailure(ex);
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportStartDatafeedAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateFilterAction.java: } catch (Exception e) {	 l.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/action/TransportUpdateProcessAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobBuilder.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/DatafeedJobBuilder.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java: } catch (IOException e) {	 listener.onFailure(new ElasticsearchParseException("Failed to serialise datafeed config with id [" + datafeedId + "]", e));	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java: } catch (IOException e) {	 delegate.onFailure(new ElasticsearchParseException("Failed to parse datafeed config [" + datafeedId + "]", e));	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java: } catch (Exception e) {	 delegate.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java: } catch (IOException e) {	 listener.onFailure(	 new ElasticsearchParseException("Failed to serialise datafeed config with id [" + updatedConfig.getId() + "]", e)
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/datafeed/persistence/DatafeedConfigProvider.java: } catch (Exception e) {	 datafeedConfigListener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/persistence/DataFrameAnalyticsConfigProvider.java: } catch (IOException e) {	 listener.onFailure(new ElasticsearchParseException("Failed to parse data frame analytics configuration [" + id + "]", e));	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/persistence/DataFrameAnalyticsConfigProvider.java: } catch (IOException e) {	 listener.onFailure(	 new ElasticsearchParseException("Failed to serialise data frame analytics with id [" + config.getId() + "]")
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/persistence/DataFrameAnalyticsConfigProvider.java: } catch (IOException e) {	 delegate.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/process/MemoryUsageEstimationProcessManager.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/dataframe/steps/FinalStep.java: } catch (IOException e) {	 listener.onFailure(ExceptionsHelper.serverError("[{}] Error persisting final data counts", e, config.getId()));	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/assignment/TrainedModelAssignmentClusterService.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/assignment/TrainedModelAssignmentClusterService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/assignment/TrainedModelAssignmentNodeService.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/deployment/AbstractControlMessagePyTorchAction.java: } catch (IOException e) {	 logger.error(() -> "[" + getModelId() + "] error writing control message to the inference process", e);	 onFailure(ExceptionsHelper.serverError("Error writing control message to the inference process", e));
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/deployment/AbstractControlMessagePyTorchAction.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/deployment/DeploymentManager.java: } catch (EsRejectedExecutionException e) {	 processContext.getRejectedExecutionCount().incrementAndGet();	 action.onFailure(e);
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/deployment/DeploymentManager.java: } catch (Exception e) {	 action.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/deployment/DeploymentManager.java: } catch (Exception e) {	 loadedListener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/deployment/InferencePyTorchAction.java: } catch (IOException e) {	 logger.error(() -> "[" + getModelId() + "] error writing to inference process", e);	 onFailure(ExceptionsHelper.serverError("Error writing to inference process", e));
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/deployment/InferencePyTorchAction.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/LocalModel.java: } catch (Exception e) {	 statsAccumulator.incFailure();	 listener.onFailure(e);
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java: } catch (CircuitBreakingException e) {	 modelActionListener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java: } catch (CircuitBreakingException e) {	 modelActionListener.onFailure(e);	 return true;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/loadingservice/ModelLoadingService.java: } catch (CircuitBreakingException ex) {	 modelActionListener.onFailure(ex);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (IOException ex) {	 listener.onFailure(	 ExceptionsHelper.serverError(
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (IOException ex) {	 listener.onFailure(	 ExceptionsHelper.serverError(
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (ElasticsearchException | IOException ex) {	 listener.onFailure(ex);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (ElasticsearchException ex) {	 finalListener.onFailure(ex);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (ResourceNotFoundException ex) {	 getTrainedModelListener.onFailure(	 new ResourceNotFoundException(Messages.getMessage(Messages.INFERENCE_NOT_FOUND, modelId))
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (Exception ex) {	 getTrainedModelListener.onFailure(ex);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (ElasticsearchException elasticsearchException) {	 getTrainedModelListener.onFailure(elasticsearchException);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (ResourceNotFoundException ex) {	 getTrainedModelListener.onFailure(	 new ResourceNotFoundException(Messages.getMessage(Messages.MODEL_DEFINITION_NOT_FOUND, modelId))
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (Exception ex) {	 getTrainedModelListener.onFailure(ex);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (ElasticsearchException ex) {	 finalListener.onFailure(ex);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (IOException ex) {	 getTrainedModelListener.onFailure(ExceptionsHelper.serverError(INFERENCE_FAILED_TO_DESERIALIZE, ex, searchHit.getId()));	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/inference/persistence/TrainedModelProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/JobManager.java: } catch (Exception e) {	 actionListener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (IOException e) {	 listener.onFailure(new ElasticsearchParseException("Failed to serialise job with id [" + job.getId() + "]", e));	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (IOException e) {	 delegate.onFailure(new ElasticsearchParseException("Failed to parse job configuration [" + jobId + "]", e));	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (Exception e) {	 delegate.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (Exception e) {	 listener.onFailure(new ElasticsearchParseException("Failed to parse job configuration [" + jobId + "]", e));	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (IOException e) {	 updatedJobListener.onFailure(	 new ElasticsearchParseException("Failed to serialise job with id [" + updatedJob.getId() + "]", e)
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobConfigProvider.java: } catch (Exception e) {	 jobListener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java: } catch (IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java: } catch (Exception e) {	 handler.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java: } catch (IOException e) {	 listener.onFailure(new IllegalStateException("Failed to serialise calendar with id [" + newCalendar.getId() + "]", e));	 return;
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/persistence/JobResultsProvider.java: } catch (Exception e) {	 this.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/EmptyStateIndexRemover.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredAnnotationsRemover.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredForecastsRemover.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredModelSnapshotsRemover.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredResultsRemover.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/ExpiredResultsRemover.java: } catch (IOException e) {	 listener.onFailure(new ElasticsearchParseException("failed to parse bucket", e));	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/UnusedStateRemover.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/job/retention/UnusedStatsRemover.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/ml/src/main/java/org/elasticsearch/xpack/ml/process/MlMemoryTracker.java: } catch (Exception e) {	 logger.warn("failed to wait for all refresh requests to complete", e);	 listener.onFailure(e);
x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringMigrateAlertsAction.java: } catch (Exception e) {	 // Make this self contained, we don't want to bubble up exceptions in a way where this listener's	 // onFailure method could be called multiple times.
x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/action/TransportMonitoringMigrateAlertsAction.java: } catch (Exception e) {	 logger.debug("exporter [" + exporter.config().name() + "]: exception encountered during refresh", e);	 listener.onFailure(e);
x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpExportBulk.java: } catch (IOException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/http/VersionHttpResource.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/monitoring/src/main/java/org/elasticsearch/xpack/monitoring/exporter/local/LocalExporter.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/MonitoringServiceTests.java: } catch (InterruptedException e) {	 listener.onFailure(new ExportException("BlockingExporter failed", e));	 }
x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/MonitoringTemplateRegistryTests.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/monitoring/src/test/java/org/elasticsearch/xpack/monitoring/exporter/http/HttpResourceTests.java: } catch (InterruptedException e) {	 listener.onFailure(e);	 }
x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/async/AsyncTaskManagementService.java: } catch (Exception exc) {	 taskManager.unregister(searchTask);	 searchTask.onFailure(exc);
x-pack/plugin/ql/src/main/java/org/elasticsearch/xpack/ql/async/AsyncTaskManagementService.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/downsample/TransportRollupAction.java: } catch (IOException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/downsample/TransportRollupIndexerAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/action/TransportPutRollupJobAction.java: } catch (IOException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/action/TransportRollupSearchAction.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/action/TransportStopRollupAction.java: } catch (InterruptedException e) {	 listener.onFailure(e);	 listener.onFailure(e);
x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/action/TransportStopRollupAction.java: } catch (Exception e) {	 listener.onFailure(	 new ElasticsearchTimeoutException(
x-pack/plugin/rollup/src/main/java/org/elasticsearch/xpack/rollup/job/RollupIndexer.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/job/RollupIndexerIndexingTests.java: } catch (IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/rollup/src/test/java/org/elasticsearch/xpack/rollup/job/RollupIndexerStateTests.java: } catch (Exception e) {	 nextPhase.onFailure(e);	 }
x-pack/plugin/searchable-snapshots/src/internalClusterTest/java/org/elasticsearch/xpack/searchablesnapshots/cache/shared/PartiallyCachedShardAllocationIntegTests.java: } catch (IOException e) {	 onFailure(e);	 }
x-pack/plugin/searchable-snapshots/src/main/java/org/elasticsearch/xpack/searchablesnapshots/cache/blob/BlobStoreCacheService.java: } catch (Exception e) {	 logger.warn(() -> "cache fill failure: [" + id + "]", e);	 listener.onFailure(e);
x-pack/plugin/security/src/internalClusterTest/java/org/elasticsearch/xpack/security/profile/ProfileCancellationIntegTests.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/TransportGrantAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/enrollment/TransportKibanaEnrollmentAction.java: } catch (Exception e) {	 listener.onFailure(	 new ElasticsearchException(
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/enrollment/TransportKibanaEnrollmentAction.java: } catch (CertificateEncodingException cee) {	 listener.onFailure(	 new ElasticsearchException(
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/enrollment/TransportNodeEnrollmentAction.java: } catch (Exception e) {	 listener.onFailure(	 new ElasticsearchException(
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/enrollment/TransportNodeEnrollmentAction.java: } catch (CertificateEncodingException e) {	 listener.onFailure(new ElasticsearchException("Unable to enroll node", e));	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/filter/SecurityActionFilter.java: } catch (IllegalArgumentException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/oidc/TransportOpenIdConnectPrepareAuthenticationAction.java: } catch (ElasticsearchException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/role/TransportDeleteRoleAction.java: } catch (Exception e) {	 logger.error((Supplier<?>) () -> "failed to delete role [" + request.name() + "]", e);	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlCompleteLogoutAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlInvalidateSessionAction.java: } catch (ElasticsearchSecurityException e) {	 logger.info("Failed to invalidate SAML session", e);	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlLogoutAction.java: } catch (ElasticsearchException e) {	 logger.debug("Internal exception during SAML logout", e);	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlPrepareAuthenticationAction.java: } catch (ElasticsearchException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/action/saml/TransportSamlSpMetadataAction.java: } catch (Exception e) {	 logger.error(() -> "Error during SAML SP metadata generation for realm [" + realm.name() + "]", e);	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java: } catch (IOException e) {	 listener.onFailure(e);	 } finally {
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ApiKeyService.java: } catch (ExecutionException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticatorChain.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/AuthenticatorChain.java: } catch (Exception e) {	 if (e instanceof ElasticsearchSecurityException) {	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java: } catch (DateTimeException | IllegalStateException e) {	 onFailure.accept(new ElasticsearchSecurityException("invalid token document", e));	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java: } catch (GeneralSecurityException e) {	 logger.warn("could not encrypt access token and refresh token string", e);	 onFailure.accept(invalidGrantException("could not refresh the requested token"));
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java: } catch (GeneralSecurityException | IOException e) {	 logger.warn("Could not format stored superseding token values", e);	 onFailure.accept(invalidGrantException("could not refresh the requested token"));
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/TokenService.java: } catch (GeneralSecurityException e) {	 logger.warn("Could not get stored superseding token values", e);	 listener.onFailure(invalidGrantException("could not refresh the requested token"));
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtAuthenticator.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtAuthenticator.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtSignatureValidator.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/jwt/JwtUtil.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidator.java: } catch (GSSException e) {	 actionListener.onFailure(e);	 actionListener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/kerberos/KerberosTicketValidator.java: } catch (PrivilegedActionException pve) {	 if (pve.getCause() instanceof LoginException) {	 actionListener.onFailure((LoginException) pve.getCause());
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 } finally {
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/ActiveDirectorySessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapSessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/LdapUserSearchSessionFactory.java: } catch (LDAPException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/SearchGroupsResolver.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapUtils.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/ldap/support/LdapUtils.java: } catch (LDAPException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (ElasticsearchSecurityException e) {	 // Don't wrap in a new ElasticsearchSecurityException	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (Exception e) {	 listener.onFailure(new ElasticsearchSecurityException("Failed to consume the OpenID connect response. ", e));	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (com.nimbusds.oauth2.sdk.ParseException | ParseException | JOSEException e) {	 LOGGER.debug("ID Token: [{}], Nonce: [{}]", idToken.getParsedString(), expectedNonce);	 claimsListener.onFailure(new ElasticsearchSecurityException("Failed to parse or validate the ID Token", e));
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (Exception e) {	 claimsListener.onFailure(new ElasticsearchSecurityException("Failed to get user information from the UserInfo endpoint.", e));	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (Exception e) {	 claimsListener.onFailure(new ElasticsearchSecurityException("Failed to get user information from the UserInfo endpoint.", e));	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (AuthenticationException | JOSEException e) {	 tokensListener.onFailure(	 new ElasticsearchSecurityException("Failed to exchange code for Id Token using the Token Endpoint.", e)
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (Exception e) {	 tokensListener.onFailure(	 new ElasticsearchSecurityException(
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/oidc/OpenIdConnectAuthenticator.java: } catch (Exception e) {	 future.onFailure(e);	 reloadFutureRef.set(null);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/service/CachingServiceAccountTokenStore.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/service/CachingServiceAccountTokenStore.java: } catch (final ExecutionException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/service/CompositeServiceAccountTokenStore.java: } catch (Exception e) {	 logger.debug(() -> "authentication of service token [" + token.getQualifiedName() + "] failed", e);	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/service/IndexServiceAccountTokenStore.java: } catch (IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/ApiKeyUserRoleDescriptorResolver.java: } catch (ElasticsearchException | IllegalArgumentException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/CachingUsernamePasswordRealm.java: } catch (final Exception e) {	 // each realm should handle exceptions, if we get one here it should be considered fatal	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/CachingUsernamePasswordRealm.java: } catch (final ExecutionException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/CachingUsernamePasswordRealm.java: } catch (final ExecutionException e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/DnRoleMapper.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/RealmUserLookup.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/mapper/NativeRoleMappingStore.java: } catch (Exception e) {	 logger.error(() -> "failed to modify role-mapping [" + name + "]", e);	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authc/support/mapper/NativeRoleMappingStore.java: } catch (IOException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java: } catch (ElasticsearchSecurityException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/AuthorizationService.java: } catch (ElasticsearchException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java: } catch (Exception e) {	 logger.error("Failed to cache check result for [{}]", privilegesToCheck);	 delegateListener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java: } catch (UnsupportedOperationException e) {	 listener.onFailure(	 new IllegalArgumentException(
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/RBACEngine.java: } catch (UnsupportedOperationException e) {	 // TODO we will need to implement this to support API keys with assigned role descriptors	 listener.onFailure(
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativePrivilegeStore.java: } catch (Exception e) {	 logger.warn("Failed to put privilege {} - {}", Strings.toString(privilege), e.toString());	 listener.onFailure(e);
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/authz/store/NativeRolesStore.java: } catch (IOException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/profile/ProfileService.java: } catch (IOException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/profile/ProfileService.java: } catch (IOException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/profile/ProfileService.java: } catch (NumberFormatException e) {	 listener.onFailure(new ElasticsearchException("profile uid [{}] differentiator is not a number", e, uid));	 return;
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/rest/action/oauth2/RestGetTokenAction.java: } catch (IOException e) {	 onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/SecurityServerTransportInterceptor.java: } catch (Exception e) {	 onFailure(e);	 }
x-pack/plugin/security/src/main/java/org/elasticsearch/xpack/security/transport/ServerTransportFilter.java: } catch (IllegalArgumentException e) {	 listener.onFailure(e);	 return;
x-pack/plugin/shutdown/src/main/java/org/elasticsearch/xpack/shutdown/TransportDeleteShutdownNodeAction.java: } catch (Exception e) {	 taskContext.onFailure(e);	 continue;
x-pack/plugin/shutdown/src/main/java/org/elasticsearch/xpack/shutdown/TransportPutShutdownNodeAction.java: } catch (Exception e) {	 taskContext.onFailure(e);	 continue;
x-pack/plugin/snapshot-repo-test-kit/src/main/java/org/elasticsearch/repositories/blobstore/testkit/GetBlobChecksumAction.java: } catch (IOException e) {	 logger.warn("failed to read blob for [{}]", request);	 listener.onFailure(e);
x-pack/plugin/snapshot-repo-test-kit/src/main/java/org/elasticsearch/repositories/blobstore/testkit/GetBlobChecksumAction.java: } catch (IOException e) {	 logger.warn("exception while read blob for [{}]", request);	 listener.onFailure(e);
x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/session/SqlSession.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
x-pack/plugin/sql/src/main/java/org/elasticsearch/xpack/sql/session/SqlSession.java: } catch (Exception ex) {	 listener.onFailure(ex);	 }
x-pack/plugin/stack/src/test/java/org/elasticsearch/xpack/stack/StackTemplateRegistryTests.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/text-structure/src/main/java/org/elasticsearch/xpack/textstructure/transport/TransportFindStructureAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/action/TransportStopTransformAction.java: } catch (ElasticsearchException ex) {	 listener.onFailure(ex);	 }
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/checkpoint/DefaultCheckpointProvider.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/IndexBasedTransformConfigManager.java: } catch (IOException e) {	 // not expected to happen but for the sake of completeness	 listener.onFailure(e);
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/IndexBasedTransformConfigManager.java: } catch (IOException e) {	 // not expected to happen but for the sake of completeness	 listener.onFailure(
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/IndexBasedTransformConfigManager.java: } catch (IOException e) {	 foundConfigsListener.onFailure(new ElasticsearchParseException("failed to parse search hit for ids", e));	 return;
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/IndexBasedTransformConfigManager.java: } catch (IOException e) {	 // not expected to happen but for the sake of completeness	 listener.onFailure(
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/IndexBasedTransformConfigManager.java: } catch (IOException e) {	 listener.onFailure(new ElasticsearchParseException("failed to parse transform stats from search hit", e));	 return;
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/IndexBasedTransformConfigManager.java: } catch (Exception e) {	 logger.error(TransformMessages.getMessage(TransformMessages.FAILED_TO_PARSE_TRANSFORM_CONFIGURATION, transformId), e);	 transformListener.onFailure(e);
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/IndexBasedTransformConfigManager.java: } catch (Exception e) {	 logger.error(TransformMessages.getMessage(TransformMessages.FAILED_TO_PARSE_TRANSFORM_CHECKPOINTS, transformId), e);	 transformListener.onFailure(e);
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/persistence/TransformInternalIndex.java: } catch (IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java: } catch (Exception e) {	 listener.onFailure(e);	 return;
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java: } catch (Exception e) {	 failureHandlingListener.onFailure(e);	 }
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java: } catch (Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java: } catch (Exception onFailureException) {	 String msg = LoggerMessageFormat.format("[{}] failed notifying saveState listeners, ignoring.", getJobId());	 logger.warn(msg, onFailureException);
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/TransformIndexer.java: } catch (Exception e) {	 logger.error(() -> "[" + getJobId() + "] failed to persist transform state.", e);	 shouldStopAtCheckpointListener.onFailure(e);
x-pack/plugin/transform/src/main/java/org/elasticsearch/xpack/transform/transforms/common/AbstractCompositeAggFunction.java: } catch (AggregationResultUtils.AggregationExtractionException extractionException) {	 listener.onFailure(new ElasticsearchStatusException(extractionException.getMessage(), RestStatus.BAD_REQUEST));	 }
x-pack/plugin/transform/src/test/java/org/elasticsearch/xpack/transform/transforms/TransformIndexerFailureHandlingTests.java: } catch (Exception e) {	 nextPhase.onFailure(e);	 }
x-pack/plugin/transform/src/test/java/org/elasticsearch/xpack/transform/transforms/TransformIndexerFailureHandlingTests.java: } catch (Exception e) {	 nextPhase.onFailure(e);	 }
x-pack/plugin/transform/src/test/java/org/elasticsearch/xpack/transform/transforms/TransformIndexerFailureHandlingTests.java: } catch (Exception e) {	 responseListener.onFailure(e);	 }
x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/transport/actions/TransportActivateWatchAction.java: } catch (IOException e) {	 listener.onFailure(e);	 }
x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/transport/actions/TransportExecuteWatchAction.java: } catch (IOException e) {	 logger.error(() -> "failed to parse [" + request.getId() + "]", e);	 listener.onFailure(e);
x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/transport/actions/TransportExecuteWatchAction.java: } catch (final Exception e) {	 listener.onFailure(e);	 }
x-pack/plugin/watcher/src/main/java/org/elasticsearch/xpack/watcher/transport/actions/TransportPutWatchAction.java: } catch (Exception e) {	 listener.onFailure(e);	 }
